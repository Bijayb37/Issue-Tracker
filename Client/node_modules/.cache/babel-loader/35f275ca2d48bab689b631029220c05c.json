{"ast":null,"code":"import { apiCall } from \"../../services/api\";\nimport { LOAD_ISSUES, UPDATE_PROJECTS } from \"../actionTypes\";\nimport { addError, removeError } from './errorActions'; //api call syntax apiCall(method, path, payload)\n\nfunction loadIssues(issues) {\n  return {\n    type: LOAD_ISSUES,\n    issues\n  };\n}\n\nfunction updateIssues(issueId) {\n  return {\n    type: UPDATE_PROJECTS,\n    id: issueId\n  };\n}\n\nexport function getIssues() {\n  return dispatch => {\n    apiCall(\"get\", \"/api/issues\").then(res => {\n      dispatch(loadIssues(res));\n    });\n  };\n}\nexport function postIssue(issueData) {\n  return (dispatch, getState) => {\n    const {\n      currentUser\n    } = getState();\n    const {\n      id\n    } = currentUser.user;\n    apiCall(\"post\", `/api/users/${id}/issues`, issueData).then(res => dispatch(removeError())).catch(err => dispatch(addError(err.message)));\n  };\n}\nexport function editIssue(issueId, issueData) {\n  return (dispatch, getState) => {\n    const {\n      currentUser\n    } = getState();\n    const {\n      id\n    } = currentUser.user;\n    apiCall(\"patch\", `/api/users/${id}/issues/${issueId}`, issueData).then(res => dispatch(removeError())).catch(err => dispatch(addError(err.message)));\n  };\n}\nexport function removeIssue(issueId) {\n  return (dispatch, getState) => {\n    const {\n      currentUser\n    } = getState();\n    const {\n      id\n    } = currentUser.user;\n    apiCall(\"delete\", `/api/users/${id}/issues/${issueId}`).then(res => dispatch(updateIssues(res._id))).catch(err => console.log(err.message));\n  };\n}","map":{"version":3,"sources":["/Users/bijaybohora/Documents/100 days/IssueTracker/Client/src/store/actions/issueActions.js"],"names":["apiCall","LOAD_ISSUES","UPDATE_PROJECTS","addError","removeError","loadIssues","issues","type","updateIssues","issueId","id","getIssues","dispatch","then","res","postIssue","issueData","getState","currentUser","user","catch","err","message","editIssue","removeIssue","_id","console","log"],"mappings":"AAAA,SAASA,OAAT,QAAwB,oBAAxB;AACA,SAASC,WAAT,EAAsBC,eAAtB,QAA6C,gBAA7C;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,gBAAtC,C,CAEA;;AACA,SAASC,UAAT,CAAoBC,MAApB,EAA4B;AACxB,SAAO;AACHC,IAAAA,IAAI,EAAEN,WADH;AAEHK,IAAAA;AAFG,GAAP;AAIH;;AAED,SAASE,YAAT,CAAsBC,OAAtB,EAA+B;AAC3B,SAAO;AACHF,IAAAA,IAAI,EAAEL,eADH;AAEHQ,IAAAA,EAAE,EAAED;AAFD,GAAP;AAIH;;AAED,OAAO,SAASE,SAAT,GAAqB;AACxB,SAAOC,QAAQ,IAAI;AACfZ,IAAAA,OAAO,CAAC,KAAD,EAAQ,aAAR,CAAP,CACCa,IADD,CACMC,GAAG,IAAI;AACTF,MAAAA,QAAQ,CAACP,UAAU,CAACS,GAAD,CAAX,CAAR;AACH,KAHD;AAIH,GALD;AAMH;AAED,OAAO,SAASC,SAAT,CAAmBC,SAAnB,EAA8B;AACjC,SAAO,CAACJ,QAAD,EAAWK,QAAX,KAAwB;AAC3B,UAAM;AAAEC,MAAAA;AAAF,QAAkBD,QAAQ,EAAhC;AACA,UAAM;AAAEP,MAAAA;AAAF,QAASQ,WAAW,CAACC,IAA3B;AACAnB,IAAAA,OAAO,CAAC,MAAD,EAAU,cAAaU,EAAG,SAA1B,EAAoCM,SAApC,CAAP,CACCH,IADD,CACMC,GAAG,IAAIF,QAAQ,CAACR,WAAW,EAAZ,CADrB,EAECgB,KAFD,CAEOC,GAAG,IAAIT,QAAQ,CAACT,QAAQ,CAACkB,GAAG,CAACC,OAAL,CAAT,CAFtB;AAGH,GAND;AAOH;AAED,OAAO,SAASC,SAAT,CAAmBd,OAAnB,EAA4BO,SAA5B,EAAuC;AAC1C,SAAO,CAACJ,QAAD,EAAWK,QAAX,KAAwB;AAC3B,UAAM;AAAEC,MAAAA;AAAF,QAAkBD,QAAQ,EAAhC;AACA,UAAM;AAAEP,MAAAA;AAAF,QAASQ,WAAW,CAACC,IAA3B;AACAnB,IAAAA,OAAO,CAAC,OAAD,EAAW,cAAaU,EAAG,WAAUD,OAAQ,EAA7C,EAAgDO,SAAhD,CAAP,CACCH,IADD,CACMC,GAAG,IAAIF,QAAQ,CAACR,WAAW,EAAZ,CADrB,EAECgB,KAFD,CAEOC,GAAG,IAAIT,QAAQ,CAACT,QAAQ,CAACkB,GAAG,CAACC,OAAL,CAAT,CAFtB;AAGH,GAND;AAOH;AAED,OAAO,SAASE,WAAT,CAAqBf,OAArB,EAA8B;AACjC,SAAO,CAACG,QAAD,EAAWK,QAAX,KAAwB;AAC3B,UAAM;AAAEC,MAAAA;AAAF,QAAkBD,QAAQ,EAAhC;AACA,UAAM;AAAEP,MAAAA;AAAF,QAASQ,WAAW,CAACC,IAA3B;AACAnB,IAAAA,OAAO,CAAC,QAAD,EAAY,cAAaU,EAAG,WAAUD,OAAQ,EAA9C,CAAP,CACCI,IADD,CACMC,GAAG,IAAIF,QAAQ,CAACJ,YAAY,CAACM,GAAG,CAACW,GAAL,CAAb,CADrB,EAECL,KAFD,CAEOC,GAAG,IAAIK,OAAO,CAACC,GAAR,CAAYN,GAAG,CAACC,OAAhB,CAFd;AAGH,GAND;AAOH","sourcesContent":["import { apiCall } from \"../../services/api\";\nimport { LOAD_ISSUES, UPDATE_PROJECTS } from \"../actionTypes\";\nimport { addError, removeError } from './errorActions'\n\n//api call syntax apiCall(method, path, payload)\nfunction loadIssues(issues) {\n    return {\n        type: LOAD_ISSUES,\n        issues\n    }\n}\n\nfunction updateIssues(issueId) {\n    return {\n        type: UPDATE_PROJECTS,\n        id: issueId\n    }\n}\n\nexport function getIssues() {\n    return dispatch => {\n        apiCall(\"get\", \"/api/issues\")\n        .then(res => {\n            dispatch(loadIssues(res))\n        })\n    }\n}\n\nexport function postIssue(issueData) {\n    return (dispatch, getState) => {\n        const { currentUser } = getState()\n        const { id } = currentUser.user\n        apiCall(\"post\", `/api/users/${id}/issues`, issueData)\n        .then(res => dispatch(removeError()))\n        .catch(err => dispatch(addError(err.message)))\n    }\n}\n\nexport function editIssue(issueId, issueData) {\n    return (dispatch, getState) => {\n        const { currentUser } = getState()\n        const { id } = currentUser.user\n        apiCall(\"patch\", `/api/users/${id}/issues/${issueId}`, issueData)\n        .then(res => dispatch(removeError()))\n        .catch(err => dispatch(addError(err.message)))\n    }\n}\n\nexport function removeIssue(issueId) {\n    return (dispatch, getState) => {\n        const { currentUser } = getState()\n        const { id } = currentUser.user \n        apiCall(\"delete\", `/api/users/${id}/issues/${issueId}`)\n        .then(res => dispatch(updateIssues(res._id)))\n        .catch(err => console.log(err.message))\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}