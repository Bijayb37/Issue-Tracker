{"ast":null,"code":"import { apiCall } from \"../../services/api\";\nimport { ADD_PROJECT, LOAD_PROJECTS } from \"../actionTypes\";\nimport { addError, removeError } from './errorActions'; //api call syntax apiCall(method, path, payload)\n\nfunction loadProjects(projects) {\n  return {\n    type: LOAD_PROJECTS,\n    projects\n  };\n}\n\nfunction addProject(issue) {\n  return {\n    type: ADD_PROJECT,\n    project\n  };\n}\n\nexport function getProjects() {\n  return dispatch => {\n    apiCall(\"get\", \"/api/projects\").then(res => dispatch(loadProjects(res))).catch(err => dispatch(addError(err.message)));\n  };\n}\nexport function postProject(projectData) {\n  return (dispatch, getState) => {\n    return new Promise((resolve, reject) => {\n      const {\n        currentUser\n      } = getState();\n      const {\n        id\n      } = currentUser.user;\n      apiCall(\"post\", `api/users/${id}/projects`, projectData).then(res => {\n        dispatch(removeError());\n        dispatch(addProject(res));\n        resolve(\"works\");\n      }).catch(err => {\n        dispatch(addError(err.message));\n        reject(\"doesnt work\");\n      });\n    });\n  };\n}\nexport function editProject(projectId, projectData) {\n  return (dispatch, getState) => {\n    const {\n      currentUser\n    } = getState();\n    const {\n      id\n    } = currentUser;\n    apiCall(\"patch\", `/api/users/${id}/projects/${projectId}`, projectData).then(res => {}).catch(err => dispatch(addError(err.message)));\n  };\n}\nexport function removeProject(projectId) {\n  return (dispatch, getState) => {\n    const {\n      currentUser\n    } = getState();\n    const {\n      id\n    } = currentUser.user;\n    apiCall(\"delete\", `/api/users/${id}/projects/${projectId}`).then(res => {}).catch(err => {\n      console.log(err);\n      dispatch(addError(err.message));\n    });\n  };\n}","map":{"version":3,"sources":["/Users/bijaybohora/Documents/100 days/IssueTracker/Client/src/store/actions/projectActions.js"],"names":["apiCall","ADD_PROJECT","LOAD_PROJECTS","addError","removeError","loadProjects","projects","type","addProject","issue","project","getProjects","dispatch","then","res","catch","err","message","postProject","projectData","getState","Promise","resolve","reject","currentUser","id","user","editProject","projectId","removeProject","console","log"],"mappings":"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","sourcesContent":["import { apiCall } from \"../../services/api\";\nimport { ADD_PROJECT, LOAD_PROJECTS } from \"../actionTypes\";\nimport { addError, removeError } from './errorActions'\n//api call syntax apiCall(method, path, payload)\n\nfunction loadProjects(projects) {\n    return {\n        type: LOAD_PROJECTS,\n        projects\n    }\n}\n\nfunction addProject(issue) {\n    return {\n        type: ADD_PROJECT,\n        project\n    }\n}\n\nexport function getProjects() {\n    return dispatch => {\n        apiCall(\"get\", \"/api/projects\")\n            .then(res => dispatch(loadProjects(res)))\n            .catch(err => dispatch(addError(err.message)))\n    }\n}\n\nexport function postProject(projectData) {\n    return (dispatch, getState) => {\n        return new Promise((resolve, reject) => {\n            const { currentUser } = getState()\n            const { id } = currentUser.user\n            apiCall(\"post\", `api/users/${id}/projects`, projectData)\n                .then(res => {\n                    dispatch(removeError())\n                    dispatch(addProject(res))\n                    resolve(\"works\")\n                })\n                .catch(err => {\n                    dispatch(addError(err.message))\n                    reject(\"doesnt work\")\n                })\n        })\n    }\n}\n\nexport function editProject(projectId, projectData) {\n    return (dispatch, getState) => {\n        const { currentUser } = getState()\n        const { id } = currentUser\n        apiCall(\"patch\", `/api/users/${id}/projects/${projectId}`, projectData)\n            .then(res => { })\n            .catch(err => dispatch(addError(err.message)))\n    }\n}\n\nexport function removeProject(projectId) {\n    return (dispatch, getState) => {\n        const { currentUser } = getState()\n        const { id } = currentUser.user\n        apiCall(\"delete\", `/api/users/${id}/projects/${projectId}`)\n            .then(res => { })\n            .catch(err => {\n                console.log(err)\n                dispatch(addError(err.message))\n            })\n    }\n}"]},"metadata":{},"sourceType":"module"}