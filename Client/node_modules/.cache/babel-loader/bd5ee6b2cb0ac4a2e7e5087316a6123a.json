{"ast":null,"code":"import { apiCall } from \"../../services/api\";\nimport { ADD_PROJECT, LOAD_PROJECTS, REMOVE_PROJECTS, UPDATE_PROJECTS } from \"../actionTypes\";\nimport { addError, removeError } from './errorActions'; //api call syntax apiCall(method, path, payload)\n\nfunction loadProjects(projects) {\n  return {\n    type: LOAD_PROJECTS,\n    projects\n  };\n}\n\nfunction addProject(project) {\n  return {\n    type: ADD_PROJECT,\n    project\n  };\n}\n\nfunction updateProject(id, newProject) {\n  return {\n    type: UPDATE_PROJECTS,\n    id,\n    issue: newProject\n  };\n}\n\nfunction removeProject(id) {\n  return {\n    type: REMOVE_PROJECTS,\n    id\n  };\n}\n\nexport function getProjects() {\n  return dispatch => {\n    apiCall(\"get\", \"/api/projects\").then(res => dispatch(loadProjects(res))).catch(err => dispatch(addError(err.message)));\n  };\n}\nexport function postProject(projectData) {\n  return (dispatch, getState) => {\n    return new Promise((resolve, reject) => {\n      const {\n        currentUser\n      } = getState();\n      const {\n        id\n      } = currentUser.user;\n      apiCall(\"post\", `api/users/${id}/projects`, projectData).then(res => {\n        dispatch(removeError());\n        dispatch(addProject(res));\n        resolve();\n      }).catch(err => {\n        dispatch(addError(err.message));\n        reject();\n      });\n    });\n  };\n}\nexport function patchProject(projectId, projectData) {\n  return (dispatch, getState) => {\n    return new Promise((resolve, reject) => {\n      const {\n        currentUser\n      } = getState();\n      const {\n        id\n      } = currentUser;\n      apiCall(\"patch\", `/api/users/${id}/projects/${projectId}`, projectData).then(res => {\n        dispatch(updateProject(res));\n        resolve();\n      }).catch(err => {\n        dispatch(addError(err.message));\n        reject();\n      });\n    });\n  };\n}\nexport function deleteProject(projectId) {\n  return (dispatch, getState) => {\n    const {\n      currentUser\n    } = getState();\n    const {\n      id\n    } = currentUser.user;\n    apiCall(\"delete\", `/api/users/${id}/projects/${projectId}`).then(res => dispatch(removeProject(res.project._id))).catch(err => {\n      console.log(err);\n      dispatch(addError(err.message));\n    });\n  };\n}","map":{"version":3,"sources":["/Users/bijaybohora/Documents/100 days/IssueTracker/Client/src/store/actions/projectActions.js"],"names":["apiCall","ADD_PROJECT","LOAD_PROJECTS","REMOVE_PROJECTS","UPDATE_PROJECTS","addError","removeError","loadProjects","projects","type","addProject","project","updateProject","id","newProject","issue","removeProject","getProjects","dispatch","then","res","catch","err","message","postProject","projectData","getState","Promise","resolve","reject","currentUser","user","patchProject","projectId","deleteProject","_id","console","log"],"mappings":"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","sourcesContent":["import { apiCall } from \"../../services/api\";\nimport { ADD_PROJECT, LOAD_PROJECTS, REMOVE_PROJECTS, UPDATE_PROJECTS } from \"../actionTypes\";\nimport { addError, removeError } from './errorActions'\n//api call syntax apiCall(method, path, payload)\n\nfunction loadProjects(projects) {\n    return {\n        type: LOAD_PROJECTS,\n        projects\n    }\n}\n\nfunction addProject(project) {\n    return {\n        type: ADD_PROJECT,\n        project\n    }\n}\n\nfunction updateProject(id, newProject) {\n    return {\n        type: UPDATE_PROJECTS,\n        id,\n        issue: newProject\n    }\n}\n\nfunction removeProject(id) {\n    return {\n        type: REMOVE_PROJECTS,\n        id\n    }\n}\n\nexport function getProjects() {\n    return dispatch => {\n        apiCall(\"get\", \"/api/projects\")\n            .then(res => dispatch(loadProjects(res)))\n            .catch(err => dispatch(addError(err.message)))\n    }\n}\n\nexport function postProject(projectData) {\n    return (dispatch, getState) => {\n        return new Promise((resolve, reject) => {\n            const { currentUser } = getState()\n            const { id } = currentUser.user\n            apiCall(\"post\", `api/users/${id}/projects`, projectData)\n                .then(res => {\n                    dispatch(removeError())\n                    dispatch(addProject(res))\n                    resolve()\n                })\n                .catch(err => {\n                    dispatch(addError(err.message))\n                    reject()\n                })\n        })\n    }\n}\n\nexport function patchProject(projectId, projectData) {\n    return (dispatch, getState) => {\n        return new Promise((resolve, reject) => {\n            const { currentUser } = getState()\n            const { id } = currentUser\n            apiCall(\"patch\", `/api/users/${id}/projects/${projectId}`, projectData)\n                .then(res => { \n                    dispatch(updateProject(res))\n                    resolve()\n                })\n                .catch(err => {\n                    dispatch(addError(err.message))\n                    reject()\n                })\n        })\n    }\n}\n\nexport function deleteProject(projectId) {\n    return (dispatch, getState) => {\n        const { currentUser } = getState()\n        const { id } = currentUser.user\n        apiCall(\"delete\", `/api/users/${id}/projects/${projectId}`)\n            .then(res => dispatch(removeProject(res.project._id)))\n            .catch(err => {\n                console.log(err)\n                dispatch(addError(err.message))\n            })\n    }\n}"]},"metadata":{},"sourceType":"module"}